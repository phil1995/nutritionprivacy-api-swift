//
// Product.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Product: Codable, JSONEncodable, Hashable {

    public var id: UUID
    /** Barcode of the Product */
    public var barcode: Int?
    public var names: [LocalizedValue]
    public var brands: [LocalizedValue]?
    public var servings: [Serving]?
    public var totalQuantity: Quantity
    public var nutriments: Nutriments
    public var verified: Bool
    public var source: String

    public init(id: UUID, barcode: Int? = nil, names: [LocalizedValue], brands: [LocalizedValue]? = nil, servings: [Serving]? = nil, totalQuantity: Quantity, nutriments: Nutriments, verified: Bool, source: String) {
        self.id = id
        self.barcode = barcode
        self.names = names
        self.brands = brands
        self.servings = servings
        self.totalQuantity = totalQuantity
        self.nutriments = nutriments
        self.verified = verified
        self.source = source
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case barcode
        case names
        case brands
        case servings
        case totalQuantity
        case nutriments
        case verified
        case source
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encodeIfPresent(barcode, forKey: .barcode)
        try container.encode(names, forKey: .names)
        try container.encodeIfPresent(brands, forKey: .brands)
        try container.encodeIfPresent(servings, forKey: .servings)
        try container.encode(totalQuantity, forKey: .totalQuantity)
        try container.encode(nutriments, forKey: .nutriments)
        try container.encode(verified, forKey: .verified)
        try container.encode(source, forKey: .source)
    }
}

