//
// Vitamins.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Vitamins: Codable, JSONEncodable, Hashable {

    static let vitaminARule = NumericRule<Double>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let vitaminB1Rule = NumericRule<Double>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let vitaminB2Rule = NumericRule<Double>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let vitaminPPRule = NumericRule<Double>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let vitaminB6Rule = NumericRule<Double>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let vitaminB9Rule = NumericRule<Double>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let vitaminB12Rule = NumericRule<Double>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let vitaminCRule = NumericRule<Double>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let vitaminDRule = NumericRule<Double>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let vitaminERule = NumericRule<Double>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let vitaminKRule = NumericRule<Double>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let betaCaroteneRule = NumericRule<Double>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let pantothenicAcidRule = NumericRule<Double>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let biotinRule = NumericRule<Double>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    /** Vitamin A measured in gram */
    public var vitaminA: Double?
    /** Vitamin B6 measured in gram */
    public var vitaminB1: Double?
    /** Vitamin B6 measured in gram */
    public var vitaminB2: Double?
    /** Vitamin PP measured in gram */
    public var vitaminPP: Double?
    /** Vitamin B6 measured in gram */
    public var vitaminB6: Double?
    /** Vitamin B9 measured in gram */
    public var vitaminB9: Double?
    /** Vitamin B12 measured in gram */
    public var vitaminB12: Double?
    /** Vitamin C measured in gram */
    public var vitaminC: Double?
    /** Vitamin D measured in gram */
    public var vitaminD: Double?
    /** Vitamin E measured in gram */
    public var vitaminE: Double?
    /** Vitamin K measured in gram */
    public var vitaminK: Double?
    /** Beta carotene measured in gram */
    public var betaCarotene: Double?
    /** Pantothenic acid (also known as Vitamin B5) measured in gram */
    public var pantothenicAcid: Double?
    /** Biotin (also known as Vitamin B8) measured in gram */
    public var biotin: Double?

    public init(vitaminA: Double? = nil, vitaminB1: Double? = nil, vitaminB2: Double? = nil, vitaminPP: Double? = nil, vitaminB6: Double? = nil, vitaminB9: Double? = nil, vitaminB12: Double? = nil, vitaminC: Double? = nil, vitaminD: Double? = nil, vitaminE: Double? = nil, vitaminK: Double? = nil, betaCarotene: Double? = nil, pantothenicAcid: Double? = nil, biotin: Double? = nil) {
        self.vitaminA = vitaminA
        self.vitaminB1 = vitaminB1
        self.vitaminB2 = vitaminB2
        self.vitaminPP = vitaminPP
        self.vitaminB6 = vitaminB6
        self.vitaminB9 = vitaminB9
        self.vitaminB12 = vitaminB12
        self.vitaminC = vitaminC
        self.vitaminD = vitaminD
        self.vitaminE = vitaminE
        self.vitaminK = vitaminK
        self.betaCarotene = betaCarotene
        self.pantothenicAcid = pantothenicAcid
        self.biotin = biotin
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case vitaminA
        case vitaminB1
        case vitaminB2
        case vitaminPP
        case vitaminB6
        case vitaminB9
        case vitaminB12
        case vitaminC
        case vitaminD
        case vitaminE
        case vitaminK
        case betaCarotene
        case pantothenicAcid
        case biotin
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(vitaminA, forKey: .vitaminA)
        try container.encodeIfPresent(vitaminB1, forKey: .vitaminB1)
        try container.encodeIfPresent(vitaminB2, forKey: .vitaminB2)
        try container.encodeIfPresent(vitaminPP, forKey: .vitaminPP)
        try container.encodeIfPresent(vitaminB6, forKey: .vitaminB6)
        try container.encodeIfPresent(vitaminB9, forKey: .vitaminB9)
        try container.encodeIfPresent(vitaminB12, forKey: .vitaminB12)
        try container.encodeIfPresent(vitaminC, forKey: .vitaminC)
        try container.encodeIfPresent(vitaminD, forKey: .vitaminD)
        try container.encodeIfPresent(vitaminE, forKey: .vitaminE)
        try container.encodeIfPresent(vitaminK, forKey: .vitaminK)
        try container.encodeIfPresent(betaCarotene, forKey: .betaCarotene)
        try container.encodeIfPresent(pantothenicAcid, forKey: .pantothenicAcid)
        try container.encodeIfPresent(biotin, forKey: .biotin)
    }
}

