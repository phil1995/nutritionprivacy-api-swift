//
// Nutriments.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Nutriments: Codable, JSONEncodable, Hashable {

    static let energyRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let fatsRule = NumericRule<Double>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let proteinsRule = NumericRule<Double>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let carbohydratesRule = NumericRule<Double>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    /** Energy measured in kcal */
    public var energy: Int
    /** Fats measured in gram */
    public var fats: Double
    /** Proteins measured in gram */
    public var proteins: Double
    /** Carbohydrates measured in gram */
    public var carbohydrates: Double
    public var fatDetails: Fats?
    public var proteinsDetails: Proteins?
    public var carbohydratesDetails: Carbohydrates?
    public var vitamins: Vitamins?
    public var minerals: Minerals?
    public var misc: MiscellaneousNutriments?

    public init(energy: Int, fats: Double, proteins: Double, carbohydrates: Double, fatDetails: Fats? = nil, proteinsDetails: Proteins? = nil, carbohydratesDetails: Carbohydrates? = nil, vitamins: Vitamins? = nil, minerals: Minerals? = nil, misc: MiscellaneousNutriments? = nil) {
        self.energy = energy
        self.fats = fats
        self.proteins = proteins
        self.carbohydrates = carbohydrates
        self.fatDetails = fatDetails
        self.proteinsDetails = proteinsDetails
        self.carbohydratesDetails = carbohydratesDetails
        self.vitamins = vitamins
        self.minerals = minerals
        self.misc = misc
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case energy
        case fats
        case proteins
        case carbohydrates
        case fatDetails
        case proteinsDetails
        case carbohydratesDetails
        case vitamins
        case minerals
        case misc
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(energy, forKey: .energy)
        try container.encode(fats, forKey: .fats)
        try container.encode(proteins, forKey: .proteins)
        try container.encode(carbohydrates, forKey: .carbohydrates)
        try container.encodeIfPresent(fatDetails, forKey: .fatDetails)
        try container.encodeIfPresent(proteinsDetails, forKey: .proteinsDetails)
        try container.encodeIfPresent(carbohydratesDetails, forKey: .carbohydratesDetails)
        try container.encodeIfPresent(vitamins, forKey: .vitamins)
        try container.encodeIfPresent(minerals, forKey: .minerals)
        try container.encodeIfPresent(misc, forKey: .misc)
    }
}

